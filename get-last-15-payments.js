import Stripe from 'stripe';

const stripe = new Stripe('sk_test_51S95aiLGc4AZl8D4LBucx6SeyHpr5atnp44MOqd9EOhsmh8faSY0ydSCIP8q1eRo5jvmkJsLPNJrqvRRSpPCxEnu00p48AJ5Er');

async function getLast15Payments() {
  console.log('üîç –ü–û–õ–£–ß–ê–Æ –ü–û–°–õ–ï–î–ù–ò–ï 15 –ü–û–ö–£–ü–û–ö –ò–ó STRIPE...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –ø–ª–∞—Ç–µ–∂–µ–π
    const payments = await stripe.paymentIntents.list({ 
      limit: 15,
      created: {
        gte: Math.floor((Date.now() - 30 * 24 * 60 * 60 * 1000) / 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${payments.data.length}\n`);

    for (let i = 0; i < payments.data.length; i++) {
      const payment = payments.data[i];
      
      console.log(`üí≥ –ü–õ–ê–¢–ï–ñ ${i + 1}:`);
      console.log(`   ID: ${payment.id}`);
      console.log(`   –°—É–º–º–∞: ${payment.amount / 100} ${payment.currency.toUpperCase()}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${payment.status}`);
      console.log(`   –î–∞—Ç–∞: ${new Date(payment.created * 1000).toLocaleString()}`);
      console.log(`   Email: ${payment.receipt_email || 'N/A'}`);
      console.log(`   Metadata:`, payment.metadata);
      console.log(`   Description: ${payment.description || 'N/A'}`);
      console.log('---');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ checkout sessions
    console.log('\nüõí –ü–û–ò–°–ö –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–©–ò–• CHECKOUT SESSIONS...\n');
    
    const sessions = await stripe.checkout.sessions.list({ 
      limit: 20,
      created: {
        gte: Math.floor((Date.now() - 30 * 24 * 60 * 60 * 1000) / 1000)
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${sessions.data.length}\n`);

    for (let i = 0; i < Math.min(15, sessions.data.length); i++) {
      const session = sessions.data[i];
      
      console.log(`üõí –°–ï–°–°–ò–Ø ${i + 1}:`);
      console.log(`   ID: ${session.id}`);
      console.log(`   –°—É–º–º–∞: ${(session.amount_total || 0) / 100} ${(session.currency || 'usd').toUpperCase()}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${session.status}`);
      console.log(`   –î–∞—Ç–∞: ${new Date(session.created * 1000).toLocaleString()}`);
      console.log(`   Email: ${session.customer_details?.email || session.customer_email || 'N/A'}`);
      console.log(`   –°—Ç—Ä–∞–Ω–∞: ${session.customer_details?.address?.country || 'N/A'}`);
      console.log(`   Metadata:`, session.metadata);
      console.log('---');
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º metadata
    console.log('\nüîç –ê–ù–ê–õ–ò–ó METADATA:');
    let hasUtmData = false;
    let hasOtherData = false;
    
    for (const session of sessions.data) {
      if (session.metadata && Object.keys(session.metadata).length > 0) {
        console.log(`\nüìä –°–µ—Å—Å–∏—è ${session.id}:`);
        for (const [key, value] of Object.entries(session.metadata)) {
          console.log(`   ${key}: ${value}`);
          if (key.toLowerCase().includes('utm') || key.toLowerCase().includes('campaign') || key.toLowerCase().includes('ad')) {
            hasUtmData = true;
          } else {
            hasOtherData = true;
          }
        }
      }
    }

    console.log('\nüéØ –í–´–í–û–î:');
    if (hasUtmData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã UTM –º–µ—Ç–∫–∏ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Å—Å–∏—è—Ö');
    } else {
      console.log('‚ùå UTM –º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    if (hasOtherData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥—Ä—É–≥–∏–µ metadata');
    } else {
      console.log('‚ùå –î—Ä—É–≥–∏–µ metadata –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    const successfulPayments = payments.data.filter(p => p.status === 'succeeded');
    const totalAmount = successfulPayments.reduce((sum, p) => sum + p.amount, 0);
    const avgAmount = successfulPayments.length > 0 ? totalAmount / successfulPayments.length / 100 : 0;
    
    console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞: $${(totalAmount / 100).toFixed(2)}`);
    console.log(`üìä –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: $${avgAmount.toFixed(2)}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${successfulPayments.length}`);
    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

getLast15Payments();
