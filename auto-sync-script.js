// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const https = require('https');

const SYNC_URL = 'https://testoraapp.vercel.app/api/sync-payments';
const PING_URL = 'https://testoraapp.vercel.app/ping';

function makeRequest(url, method = 'GET') {
  return new Promise((resolve, reject) => {
    const options = {
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = https.request(url, options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve(result);
        } catch (e) {
          resolve(data);
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
}

async function runSync() {
  try {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
    const result = await makeRequest(SYNC_URL, 'POST');
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

async function keepAlive() {
  try {
    console.log('üíì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...');
    await makeRequest(PING_URL, 'GET');
  } catch (error) {
    console.error('‚ùå Ping –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(runSync, 5 * 60 * 1000);

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(keepAlive, 60 * 1000);

// –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
setTimeout(runSync, 10000);

console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
console.log('   - –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É');
