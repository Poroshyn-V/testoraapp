import Stripe from 'stripe';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { config } from 'dotenv';

// Load environment variables
config();

// Environment variables
const ENV = {
  STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,
  GOOGLE_SERVICE_EMAIL: process.env.GOOGLE_SERVICE_EMAIL,
  GOOGLE_SERVICE_PRIVATE_KEY: (process.env.GOOGLE_SERVICE_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
  GOOGLE_SHEETS_DOC_ID: process.env.GOOGLE_SHEETS_DOC_ID
};

async function finalCleanup() {
  try {
    console.log('üßπ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¢–ê–ë–õ–ò–¶–´');
    console.log('============================');
    
    // Initialize Stripe
    const stripe = new Stripe(ENV.STRIPE_SECRET_KEY);
    
    // Initialize Google Sheets
    const serviceAccountAuth = new JWT({
      email: ENV.GOOGLE_SERVICE_EMAIL,
      key: ENV.GOOGLE_SERVICE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(ENV.GOOGLE_SHEETS_DOC_ID, serviceAccountAuth);
    await doc.loadInfo();
    console.log(`‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω: ${doc.title}`);
    
    const sheet = doc.sheetsByIndex[0];
    const rows = await sheet.getRows();
    console.log(`üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${rows.length}`);
    
    // 1. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å "Subscription update"
    console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å "Subscription update"...');
    const rowsToDelete = [];
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const description = row.get('Description') || '';
      
      if (description.toLowerCase().includes('subscription update')) {
        rowsToDelete.push({
          rowIndex: i,
          row: row,
          email: row.get('Email') || '',
          description: description
        });
        console.log(`‚ùå –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å "Subscription update": ${row.get('Email')} - ${description}`);
      }
    }
    
    console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π "Subscription update" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${rowsToDelete.length}`);
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å "Subscription update" (—Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–±–∏–ª–∏—Å—å)
    let deletedCount = 0;
    for (let i = rowsToDelete.length - 1; i >= 0; i--) {
      try {
        const record = rowsToDelete[i];
        await record.row.delete();
        deletedCount++;
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å "Subscription update": ${record.email}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:`, error.message);
      }
    }
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π "Subscription update": ${deletedCount}`);
    
    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
    console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏...');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    const updatedRows = await sheet.getRows();
    console.log(`üìã –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: ${updatedRows.length}`);
    
    const recordsToFix = [];
    
    for (let i = 0; i < updatedRows.length; i++) {
      const row = updatedRows[i];
      const amount = row.get('Amount') || '';
      const geo = row.get('GEO') || '';
      const status = row.get('Status') || '';
      const paymentIds = row.get('Payment Intent IDs') || '';
      const email = row.get('Email') || '';
      
      if ((!amount || amount.trim() === '') || (!geo || geo.trim() === '') || (!status || status.trim() === '')) {
        recordsToFix.push({
          rowIndex: i,
          row: row,
          paymentIds: paymentIds,
          email: email,
          currentAmount: amount,
          currentGeo: geo,
          currentStatus: status
        });
        console.log(`‚ùå –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${email} - Payment IDs: ${paymentIds}`);
      }
    }
    
    console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${recordsToFix.length}`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    let fixedCount = 0;
    
    for (let i = 0; i < recordsToFix.length; i++) {
      const record = recordsToFix[i];
      
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
        if (i > 0 && i % 5 === 0) {
          console.log(`‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API...`);
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
        const paymentIds = record.paymentIds.split(', ').filter(id => id.trim());
        
        if (paymentIds.length === 0) {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø–∏—Å—å ${record.email} - –Ω–µ—Ç Payment IDs`);
          continue;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Stripe –ø–æ –ø–µ—Ä–≤–æ–º—É Payment ID
        const paymentId = paymentIds[0];
        const payment = await stripe.paymentIntents.retrieve(paymentId);
        
        if (!payment || payment.status !== 'succeeded') {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø–∏—Å—å ${record.email} - –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É—Å–ø–µ—à–µ–Ω`);
          continue;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        let customer = null;
        if (payment.customer) {
          try {
            customer = await stripe.customers.retrieve(payment.customer);
            if (customer && 'deleted' in customer && customer.deleted) {
              customer = null;
            }
          } catch (err) {
            console.error(`Error retrieving customer ${payment.customer}:`, err);
          }
        }
        
        const m = { ...payment.metadata, ...(customer?.metadata || {}) };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const amount = `$${(payment.amount / 100).toFixed(2)} USD`;
        const country = m.country || '';
        const city = m.city || '';
        const geo = country && city ? `${country}, ${city}` : (m.geo || '');
        const status = payment.status;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        const updates = {};
        if (!record.currentAmount || record.currentAmount.trim() === '') {
          updates['Amount'] = amount;
        }
        if (!record.currentGeo || record.currentGeo.trim() === '') {
          updates['GEO'] = geo;
          updates['Country'] = country;
          updates['City'] = city;
        }
        if (!record.currentStatus || record.currentStatus.trim() === '') {
          updates['Status'] = status;
        }
        
        if (Object.keys(updates).length > 0) {
          for (const [key, value] of Object.entries(updates)) {
            record.row.set(key, value);
          }
          await record.row.save();
          
          fixedCount++;
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ${record.email}: ${Object.keys(updates).join(', ')}`);
        }
        
      } catch (error) {
        if (error.message.includes('Quota exceeded')) {
          console.log(`‚è≥ –õ–∏–º–∏—Ç API –ø—Ä–µ–≤—ã—à–µ–Ω, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥...`);
          await new Promise(resolve => setTimeout(resolve, 10000));
          i--; // –ü–æ–≤—Ç–æ—Ä—è–µ–º —ç—Ç—É –∑–∞–ø–∏—Å—å
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ${record.email}:`, error.message);
        }
      }
    }
    
    console.log(`\nüéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π "Subscription update": ${deletedCount}`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${fixedCount}`);
    console.log(`üìä –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${updatedRows.length - deletedCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', error.message);
  }
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã...');
finalCleanup();
