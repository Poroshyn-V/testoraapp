import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

async function checkRecentPaymentsDebug() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ü–õ–ê–¢–ï–ñ–ï–ô –ò –ú–ï–¢–ê–î–ê–ù–ù–´–•...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const twentyFourHoursAgo = Math.floor((Date.now() - 24 * 60 * 60 * 1000) / 1000);
    
    const payments = await stripe.paymentIntents.list({
      limit: 10,
      created: {
        gte: twentyFourHoursAgo
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${payments.data.length}`);

    if (payments.data.length > 0) {
      console.log('\nüí≥ –ü–û–°–õ–ï–î–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ò:');
      console.log('================================');
      
      for (const payment of payments.data) {
        console.log(`\nüí≥ Payment: ${payment.id}`);
        console.log(`   Status: ${payment.status}`);
        console.log(`   Amount: $${(payment.amount / 100).toFixed(2)}`);
        console.log(`   Created: ${new Date(payment.created * 1000).toLocaleString()}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata –ø–ª–∞—Ç–µ–∂–∞
        console.log(`   Payment Metadata:`, payment.metadata);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        const customer = await stripe.customers.retrieve(payment.customer);
        console.log(`   Customer ID: ${customer?.id || 'N/A'}`);
        console.log(`   Customer Email: ${customer?.email || 'N/A'}`);
        console.log(`   Customer Name: ${customer?.name || 'N/A'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata –∫–ª–∏–µ–Ω—Ç–∞
        const customerMetadata = customer?.metadata || {};
        console.log(`   Customer Metadata:`, customerMetadata);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ UTM –ø–æ–ª—è
        console.log(`   UTM Source: ${customerMetadata.utm_source || '–ù–ï–¢'}`);
        console.log(`   UTM Medium: ${customerMetadata.utm_medium || '–ù–ï–¢'}`);
        console.log(`   UTM Campaign: ${customerMetadata.utm_campaign || '–ù–ï–¢'}`);
        console.log(`   Ad Name: ${customerMetadata.ad_name || '–ù–ï–¢'}`);
        console.log(`   Adset Name: ${customerMetadata.adset_name || '–ù–ï–¢'}`);
        console.log(`   Campaign Name: ${customerMetadata.campaign_name || '–ù–ï–¢'}`);
        console.log(`   Product Tag: ${customerMetadata.product_tag || '–ù–ï–¢'}`);
        console.log(`   Gender: ${customerMetadata.gender || '–ù–ï–¢'}`);
        console.log(`   Age: ${customerMetadata.age || '–ù–ï–¢'}`);
        console.log(`   Creative Link: ${customerMetadata.creative_link || '–ù–ï–¢'}`);
        console.log(`   IP Address: ${customerMetadata.ip_address || '–ù–ï–¢'}`);
        console.log(`   User Agent: ${customerMetadata.user_agent || '–ù–ï–¢'}`);
        
        if (payment.status === 'succeeded') {
          console.log('   ‚úÖ –£–°–ü–ï–®–ù–´–ô –ü–õ–ê–¢–ï–ñ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        }
      }
    } else {
      console.log('üì≠ –ù–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞—Ç–µ–∂–µ–π –≤–æ–æ–±—â–µ
      console.log('\nüîç –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ï 5 –ü–õ–ê–¢–ï–ñ–ï–ô:');
      const allPayments = await stripe.paymentIntents.list({ limit: 5 });
      
      for (const payment of allPayments.data) {
        const customer = await stripe.customers.retrieve(payment.customer);
        const metadata = customer?.metadata || {};
        
        console.log(`\nüí≥ ${payment.id} - ${new Date(payment.created * 1000).toLocaleString()}`);
        console.log(`   UTM Source: ${metadata.utm_source || '–ù–ï–¢'}`);
        console.log(`   UTM Medium: ${metadata.utm_medium || '–ù–ï–¢'}`);
        console.log(`   UTM Campaign: ${metadata.utm_campaign || '–ù–ï–¢'}`);
        console.log(`   Ad Name: ${metadata.ad_name || '–ù–ï–¢'}`);
        console.log(`   Product Tag: ${metadata.product_tag || '–ù–ï–¢'}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', error.message);
  }
}

checkRecentPaymentsDebug();
