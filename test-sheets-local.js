// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Google Sheets –ª–æ–∫–∞–ª—å–Ω–æ
require('dotenv').config();
const crypto = require('crypto');

async function testGoogleSheets() {
  try {
    console.log('üß™ –¢–ï–°–¢ GOOGLE SHEETS –õ–û–ö–ê–õ–¨–ù–û...');
    
    console.log('GOOGLE_SHEETS_DOC_ID:', process.env.GOOGLE_SHEETS_DOC_ID ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
    console.log('GOOGLE_SERVICE_EMAIL:', process.env.GOOGLE_SERVICE_EMAIL ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
    console.log('GOOGLE_SERVICE_PRIVATE_KEY:', process.env.GOOGLE_SERVICE_PRIVATE_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
    
    if (!process.env.GOOGLE_SHEETS_DOC_ID || !process.env.GOOGLE_SERVICE_EMAIL || !process.env.GOOGLE_SERVICE_PRIVATE_KEY) {
      console.log('‚ùå Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const header = { "alg": "RS256", "typ": "JWT" };
    const now = Math.floor(Date.now() / 1000);
    const payload = {
      iss: process.env.GOOGLE_SERVICE_EMAIL,
      scope: 'https://www.googleapis.com/auth/spreadsheets',
      aud: 'https://oauth2.googleapis.com/token',
      iat: now,
      exp: now + 3600
    };
    
    const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');
    const encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64url');
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
    let privateKey = process.env.GOOGLE_SERVICE_PRIVATE_KEY;
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º \n
    privateKey = privateKey.replace(/\\n/g, '\n').replace(/"/g, '');
    
    let signature;
    try {
      signature = crypto.createSign('RSA-SHA256')
        .update(`${encodedHeader}.${encodedPayload}`)
        .sign(privateKey, 'base64url');
      console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1 —Å—Ä–∞–±–æ—Ç–∞–ª');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º 1:', error.message);
      
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ–¥–≤–∞–ª
      privateKey = `-----BEGIN PRIVATE KEY-----\n${process.env.GOOGLE_SERVICE_PRIVATE_KEY.replace(/\\n/g, '\n').replace(/"/g, '')}\n-----END PRIVATE KEY-----`;
      
      try {
        signature = crypto.createSign('RSA-SHA256')
          .update(`${encodedHeader}.${encodedPayload}`)
          .sign(privateKey, 'base64url');
        console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2 —Å—Ä–∞–±–æ—Ç–∞–ª');
      } catch (error2) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º 2:', error2.message);
        return;
      }
    }
    
    const jwt = `${encodedHeader}.${encodedPayload}.${signature}`;
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º access token
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=${jwt}`
    });
    
    if (tokenResponse.ok) {
      const tokenData = await tokenResponse.json();
      console.log('‚úÖ Access token –ø–æ–ª—É—á–µ–Ω');
      
      // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –ª–∏—Å—Ç
      const clearResponse = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${process.env.GOOGLE_SHEETS_DOC_ID}/values/A:Z:clear?valueInputOption=RAW`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${tokenData.access_token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (clearResponse.ok) {
        console.log('‚úÖ Google Sheets –æ—á–∏—â–µ–Ω');
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–∏—Å—Ç');
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const testData = [
        ['Purchase ID', 'Total Amount', 'Currency', 'Status', 'Created UTC', 'Created Local (UTC+1)', 'Customer ID', 'Customer Email', 'GEO', 'UTM Source', 'UTM Medium', 'UTM Campaign', 'UTM Content', 'UTM Term', 'Ad Name', 'Adset Name', 'Payment Count'],
        ['test_1', '9.99', 'USD', 'succeeded', '2025-01-01T00:00:00.000Z', '2025-01-01 01:00:00.000 UTC+1', 'cus_test1', 'test@example.com', 'US, New York', 'google', 'cpc', 'test_campaign', 'test_content', 'test_term', 'test_ad', 'test_adset', 1],
        ['test_2', '19.99', 'USD', 'succeeded', '2025-01-02T00:00:00.000Z', '2025-01-02 01:00:00.000 UTC+1', 'cus_test2', 'test2@example.com', 'DE, Berlin', 'facebook', 'cpc', 'test_campaign2', 'test_content2', 'test_term2', 'test_ad2', 'test_adset2', 1]
      ];
      
      const range = `A1:Q${testData.length}`;
      const sheetsResponse = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${process.env.GOOGLE_SHEETS_DOC_ID}/values/${range}?valueInputOption=RAW`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${tokenData.access_token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ values: testData })
      });
        
      if (sheetsResponse.ok) {
        console.log('‚úÖ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –ó–ê–ü–ò–°–ê–ù–´ –í GOOGLE SHEETS');
        console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/${process.env.GOOGLE_SHEETS_DOC_ID}`);
      } else {
        const errorText = await sheetsResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:', errorText);
      }
    } else {
      const errorText = await tokenResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Google Sheets:', errorText);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Google Sheets:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGoogleSheets();

