// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Google Sheets
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import Stripe from 'stripe';
import dotenv from 'dotenv';

dotenv.config();

const ENV = {
  GOOGLE_SERVICE_EMAIL: process.env.GOOGLE_SERVICE_EMAIL,
  GOOGLE_SERVICE_PRIVATE_KEY: process.env.GOOGLE_SERVICE_PRIVATE_KEY,
  GOOGLE_SHEETS_DOC_ID: process.env.GOOGLE_SHEETS_DOC_ID,
  STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY
};

const stripe = new Stripe(ENV.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

async function fixDuplicates() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ Google Sheets...');
    
    if (!ENV.GOOGLE_SERVICE_EMAIL || !ENV.GOOGLE_SERVICE_PRIVATE_KEY || !ENV.GOOGLE_SHEETS_DOC_ID) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    const serviceAccountAuth = new JWT({
      email: ENV.GOOGLE_SERVICE_EMAIL,
      key: ENV.GOOGLE_SERVICE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(ENV.GOOGLE_SHEETS_DOC_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    const rows = await sheet.getRows();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ Customer ID
    const customerGroups = new Map();
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const customerId = row.get('Customer ID');
      const email = row.get('Email');
      
      if (!customerId || customerId === 'N/A' || !email || email === 'N/A') {
        continue;
      }
      
      if (!customerGroups.has(customerId)) {
        customerGroups.set(customerId, []);
      }
      customerGroups.get(customerId).push({ row, index: i });
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${customerGroups.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    
    let duplicatesFixed = 0;
    let rowsToDelete = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –∫–ª–∏–µ–Ω—Ç–æ–≤
    for (const [customerId, customerRows] of customerGroups.entries()) {
      if (customerRows.length > 1) {
        console.log(`\nüîç –ö–ª–∏–µ–Ω—Ç ${customerId} –∏–º–µ–µ—Ç ${customerRows.length} –∑–∞–ø–∏—Å–µ–π`);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è)
        customerRows.sort((a, b) => {
          const dateA = new Date(a.row.get('Created Local (UTC+1)') || '');
          const dateB = new Date(b.row.get('Created Local (UTC+1)') || '');
          return dateA - dateB;
        });
        
        const firstRow = customerRows[0].row;
        const duplicateRows = customerRows.slice(1);
        
        console.log(`  üìÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: ${firstRow.get('Created Local (UTC+1)')}`);
        console.log(`  üìÖ –î—É–±–ª–∏–∫–∞—Ç—ã: ${duplicateRows.length}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Stripe
        try {
          const payments = await stripe.paymentIntents.list({
            customer: customerId,
            limit: 100
          });
          
          const successfulPayments = payments.data.filter(p => {
            if (p.status !== 'succeeded' || !p.customer) return false;
            if (p.description && p.description.toLowerCase().includes('subscription update')) {
              return false;
            }
            return true;
          });
          
          if (successfulPayments.length > 0) {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤
            const groupedPayments = [];
            const processedPayments = new Set();
            
            for (const payment of successfulPayments) {
              if (processedPayments.has(payment.id)) continue;
              
              const group = [payment];
              processedPayments.add(payment.id);
              
              for (const otherPayment of successfulPayments) {
                if (processedPayments.has(otherPayment.id)) continue;
                
                const timeDiff = Math.abs(payment.created - otherPayment.created);
                const hoursDiff = timeDiff / 3600;
                
                if (hoursDiff <= 3) {
                  group.push(otherPayment);
                  processedPayments.add(otherPayment.id);
                }
              }
              
              groupedPayments.push(group);
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—É–º–º—ã
            let correctTotalAmount = 0;
            let correctPaymentCount = 0;
            const correctPaymentIds = [];
            
            for (const group of groupedPayments) {
              for (const payment of group) {
                correctTotalAmount += payment.amount;
                correctPaymentCount++;
                correctPaymentIds.push(payment.id);
              }
            }
            
            const correctTotalAmountFormatted = (correctTotalAmount / 100).toFixed(2);
            const correctPaymentIdsString = correctPaymentIds.join(', ');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
            firstRow.set('Total Amount', correctTotalAmountFormatted);
            firstRow.set('Payment Count', correctPaymentCount.toString());
            firstRow.set('Payment Intent IDs', correctPaymentIdsString);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º Purchase ID —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            firstRow.set('Purchase ID', `purchase_${customerId}`);
            
            await firstRow.save();
            console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: $${correctTotalAmountFormatted} (${correctPaymentCount} –ø–ª–∞—Ç–µ–∂–µ–π)`);
            
            // –ü–æ–º–µ—á–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            for (const duplicate of duplicateRows) {
              rowsToDelete.push(duplicate.index);
              console.log(`  üóëÔ∏è –ü–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: —Å—Ç—Ä–æ–∫–∞ ${duplicate.index + 1}`);
            }
            
            duplicatesFixed++;
          }
        } catch (error) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è ${customerId}: ${error.message}`);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–±–∏–ª–∏—Å—å)
    console.log(`\nüóëÔ∏è –£–¥–∞–ª—è—é ${rowsToDelete.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...`);
    rowsToDelete.sort((a, b) => b - a); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    
    for (const index of rowsToDelete) {
      try {
        await rows[index].delete();
        console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ${index + 1}`);
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ ${index + 1}: ${error.message}`);
      }
    }
    
    console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`  –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: ${duplicatesFixed}`);
    console.log(`  –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${rowsToDelete.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error.message);
  }
}

fixDuplicates();
