const Stripe = require('stripe');
const crypto = require('crypto');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

async function forceExportAll() {
  try {
    console.log('üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–õ–ù–ê–Ø –í–´–ì–†–£–ó–ö–ê –í–°–ï–• –ü–û–ö–£–ü–û–ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–ª–∞—Ç–µ–∂–∏ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
    const allPayments = [];
    let hasMore = true;
    let startingAfter = null;
    
    while (hasMore) {
      const params = { limit: 100 };
      if (startingAfter) {
        params.starting_after = startingAfter;
      }
      
      const payments = await stripe.paymentIntents.list(params);
      allPayments.push(...payments.data);
      
      hasMore = payments.has_more;
      if (hasMore && payments.data.length > 0) {
        startingAfter = payments.data[payments.data.length - 1].id;
      }
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${allPayments.length}`);
    
    const successfulPayments = allPayments.filter(p => p.status === 'succeeded' && p.customer);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏: ${successfulPayments.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É –∏ –¥–∞—Ç–µ
    const groupedPurchases = new Map();
    
    for (const payment of successfulPayments) {
      const customer = await stripe.customers.retrieve(payment.customer);
      const customerIdForExport = customer?.id;
      const purchaseDateForExport = new Date(payment.created * 1000);
      const dateKeyForExport = `${customerIdForExport}_${purchaseDateForExport.toISOString().split('T')[0]}`;
      
      if (!groupedPurchases.has(dateKeyForExport)) {
        groupedPurchases.set(dateKeyForExport, {
          customer,
          payments: [],
          totalAmount: 0,
          firstPayment: payment
        });
      }
      
      const group = groupedPurchases.get(dateKeyForExport);
      group.payments.push(payment);
      group.totalAmount += payment.amount;
    }
    
    console.log(`üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∫—É–ø–æ–∫: ${groupedPurchases.size}`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ ‚Üí –Ω–æ–≤—ã–µ)
    const sortedGroups = Array.from(groupedPurchases.entries()).sort((a, b) => {
      const dateA = new Date(a[1].firstPayment.created * 1000);
      const dateB = new Date(b[1].firstPayment.created * 1000);
      return dateA - dateB; // —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É
    });
    
    console.log('üìÖ –ü–æ–∫—É–ø–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: —Å—Ç–∞—Ä—ã–µ ‚Üí –Ω–æ–≤—ã–µ');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
    if (process.env.GOOGLE_SHEETS_DOC_ID && process.env.GOOGLE_SERVICE_EMAIL && process.env.GOOGLE_SERVICE_PRIVATE_KEY) {
      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è Google Sheets
      const header = { "alg": "RS256", "typ": "JWT" };
      const now = Math.floor(Date.now() / 1000);
      const payload = {
        iss: process.env.GOOGLE_SERVICE_EMAIL,
        scope: 'https://www.googleapis.com/auth/spreadsheets',
        aud: 'https://oauth2.googleapis.com/token',
        iat: now,
        exp: now + 3600
      };

      const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');
      const encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64url');

      const privateKey = process.env.GOOGLE_SERVICE_PRIVATE_KEY
        .replace(/\\n/g, '\n')
        .replace(/"/g, '');

      const signature = crypto.createSign('RSA-SHA256')
        .update(`${encodedHeader}.${encodedPayload}`)
        .sign(privateKey, 'base64url');

      const jwt = `${encodedHeader}.${encodedPayload}.${signature}`;

      // –ü–æ–ª—É—á–∞–µ–º access token
      const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: `grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=${jwt}`
      });

      if (tokenResponse.ok) {
        const tokenData = await tokenResponse.json();
        
        // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –ª–∏—Å—Ç
        const clearResponse = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${process.env.GOOGLE_SHEETS_DOC_ID}/values/A:Z:clear?valueInputOption=RAW`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${tokenData.access_token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (clearResponse.ok) {
          console.log('üßπ Google Sheets –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportData = [
          ['Purchase ID', 'Total Amount', 'Currency', 'Status', 'Created UTC', 'Created Local (UTC+1)', 'Customer ID', 'Customer Email', 'GEO', 'UTM Source', 'UTM Medium', 'UTM Campaign', 'UTM Content', 'UTM Term', 'Ad Name', 'Adset Name', 'Payment Count']
        ];
        
        for (const [dateKeyForExport, group] of sortedGroups) {
          const customer = group.customer;
          const firstPayment = group.firstPayment;
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º GEO –¥–∞–Ω–Ω—ã–µ
          let geoData = 'N/A';
          if (customer?.metadata?.geo_country && customer?.metadata?.geo_city) {
            geoData = `${customer.metadata.geo_country}, ${customer.metadata.geo_city}`;
          } else if (customer?.metadata?.geo_country) {
            geoData = customer.metadata.geo_country;
          }
          
          const utcTime = new Date(firstPayment.created * 1000).toISOString();
          const localTime = new Date(firstPayment.created * 1000 + 3600000).toISOString().replace('T', ' ').replace('Z', ' UTC+1');
          
          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–∞—Ç—ã
          const purchaseId = `purchase_${customer?.id}_${dateKeyForExport.split('_')[1]}`;
          
          const row = [
            purchaseId,
            (group.totalAmount / 100).toFixed(2),
            firstPayment.currency.toUpperCase(),
            'succeeded',
            utcTime,
            localTime,
            customer?.id || 'N/A',
            customer?.email || 'N/A',
            geoData,
            customer?.metadata?.utm_source || 'N/A',
            customer?.metadata?.utm_medium || 'N/A',
            customer?.metadata?.utm_campaign || 'N/A',
            customer?.metadata?.utm_content || 'N/A',
            customer?.metadata?.utm_term || 'N/A',
            customer?.metadata?.ad_name || 'N/A',
            customer?.metadata?.adset_name || 'N/A',
            group.payments.length // Payment Count
          ];
          
          exportData.push(row);
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets (–ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
        const range = `A1:Q${exportData.length}`;
        const sheetsResponse = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${process.env.GOOGLE_SHEETS_DOC_ID}/values/${range}?valueInputOption=RAW`, {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${tokenData.access_token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ values: exportData })
        });
          
        if (sheetsResponse.ok) {
          console.log('‚úÖ –í–°–ï –ü–û–ö–£–ü–ö–ò –ó–ê–ü–ò–°–ê–ù–´ –í GOOGLE SHEETS:', exportData.length - 1, '–ø–æ–∫—É–ø–æ–∫');
          console.log(`üìä –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${allPayments.length}`);
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${successfulPayments.length}`);
          console.log(`üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∫—É–ø–æ–∫: ${groupedPurchases.size}`);
          console.log(`üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∫—É–ø–æ–∫: ${exportData.length - 1}`);
          console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/${process.env.GOOGLE_SHEETS_DOC_ID}`);
        } else {
          const errorText = await sheetsResponse.text();
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:', errorText);
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Google Sheets');
      }
    } else {
      console.log('‚ùå Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
forceExportAll();



