// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—É–ø–æ–∫ –≤ Stripe
import Stripe from 'stripe';
import dotenv from 'dotenv';

dotenv.config();

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

async function checkPayments() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–∫—É–ø–∫–∏ –≤ Stripe...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const sevenDaysAgo = Math.floor(Date.now() / 1000) - (7 * 24 * 60 * 60);
    
    const payments = await stripe.paymentIntents.list({
      limit: 100,
      created: {
        gte: sevenDaysAgo
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${payments.data.length}`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const successfulPayments = payments.data.filter(p => p.status === 'succeeded' && p.customer);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${successfulPayments.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫:');
    for (let i = 0; i < Math.min(5, successfulPayments.length); i++) {
      const payment = successfulPayments[i];
      const customer = await stripe.customers.retrieve(payment.customer);
      
      console.log(`\n${i + 1}. –ü–æ–∫—É–ø–∫–∞:`);
      console.log(`   üí∞ –°—É–º–º–∞: ${(payment.amount / 100).toFixed(2)} ${payment.currency.toUpperCase()}`);
      console.log(`   üìß Email: ${customer.email || 'N/A'}`);
      console.log(`   üÜî Customer ID: ${payment.customer}`);
      console.log(`   üìÖ –î–∞—Ç–∞: ${new Date(payment.created * 1000).toISOString()}`);
      console.log(`   üÜî Payment ID: ${payment.id}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkPayments();