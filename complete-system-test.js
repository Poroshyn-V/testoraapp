import Stripe from 'stripe';
import fetch from 'node-fetch';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
async function completeSystemTest() {
  try {
    console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Stripe –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê STRIPE:');
    const payments = await stripe.paymentIntents.list({ limit: 1 });
    if (payments.data.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ Stripe');
      return;
    }
    
    const payment = payments.data[0];
    console.log(`‚úÖ Stripe –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: ${payment.id}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–ê:');
    const customer = await stripe.customers.retrieve(payment.customer);
    const metadata = customer?.metadata || {};
    
    console.log(`üìß Email: ${customer?.email || '–ù–ï–¢'}`);
    console.log(`üåç UTM Source: ${metadata.utm_source || '–ù–ï–¢'}`);
    console.log(`üì± Ad Name: ${metadata.ad_name || '–ù–ï–¢'}`);
    console.log(`üéØ Campaign: ${metadata.utm_campaign || '–ù–ï–¢'}`);
    console.log(`üåç Geo Country: ${metadata.geo_country || '–ù–ï–¢'}`);
    console.log(`üèôÔ∏è Geo City: ${metadata.geo_city || '–ù–ï–¢'}`);
    console.log(`üåê IP: ${metadata.ip_address || '–ù–ï–¢'}`);
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ì–ï–û –ª–æ–≥–∏–∫—É
    console.log('\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–û:');
    let geo = 'N/A';
    
    if (metadata.geo_country && metadata.geo_city) {
      geo = `${metadata.geo_country}, ${metadata.geo_city}`;
      console.log(`‚úÖ –ì–ï–û –∏–∑ metadata: ${geo}`);
    } else if (metadata.geo_country) {
      geo = metadata.geo_country;
      console.log(`‚úÖ –ì–ï–û —Å—Ç—Ä–∞–Ω–∞: ${geo}`);
    } else {
      const ipAddress = metadata.ip_address;
      if (ipAddress && !ipAddress.includes(':')) {
        try {
          const geoResponse = await fetch(`https://ipinfo.io/${ipAddress}/json`);
          const geoData = await geoResponse.json();
          geo = `${geoData.country}, ${geoData.city}`;
          console.log(`‚úÖ –ì–ï–û –ø–æ IP: ${geo}`);
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ì–ï–û –ø–æ IP: ${error.message}`);
        }
      } else {
        console.log(`‚ö†Ô∏è IP –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: ${ipAddress}`);
      }
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:');
    
    const amount = payment.amount / 100;
    const currency = payment.currency.toUpperCase();
    const email = customer?.email || 'N/A';
    const country = metadata.geo_country || 'US';
    const orderId = Math.random().toString(36).substring(2, 15);
    
    const telegramMessage = `üü¢ Order ${orderId} was processed!
---------------------------
üí≥ card
üí∞ ${amount} ${currency}
üè∑Ô∏è N/A
---------------------------
üìß ${email}
---------------------------
üå™Ô∏è ${orderId.substring(0, 6)}
üìç ${country}
üßçN/A N/A
üîó N/A
${metadata.utm_source || 'N/A'}
${metadata.utm_medium || 'N/A'}
${metadata.ad_name || 'N/A'}
${metadata.adset_name || 'N/A'}
${metadata.utm_campaign || 'N/A'}`;
    
    console.log('üì± TELEGRAM –°–û–û–ë–©–ï–ù–ò–ï:');
    console.log(telegramMessage);
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Sheets –¥–∞–Ω–Ω—ã–µ
    console.log('\n5Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE SHEETS:');
    const sheetsData = [
      payment.id,
      `$${amount}`,
      currency,
      payment.status,
      new Date(payment.created * 1000).toLocaleString(),
      customer?.id || 'N/A',
      email,
      geo,
      metadata.utm_source || 'N/A',
      metadata.utm_medium || 'N/A',
      metadata.utm_campaign || 'N/A',
      metadata.utm_content || 'N/A',
      metadata.utm_term || 'N/A',
      metadata.ad_name || 'N/A',
      metadata.adset_name || 'N/A'
    ];
    
    console.log('üìä GOOGLE SHEETS –î–ê–ù–ù–´–ï:');
    console.log(sheetsData);
    
    console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

completeSystemTest();
