import express from 'express';
import Stripe from 'stripe';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

app.use(express.json());

// Health check
app.get('/health', (req, res) => {
  res.status(200).send('ok');
});

// Test page
app.get('/test', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Test API</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .button { background: #007bff; color: white; padding: 15px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; width: 100%; margin: 20px 0; }
            .button:hover { background: #0056b3; }
            .result { margin-top: 20px; padding: 15px; border-radius: 5px; white-space: pre-wrap; }
            .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        </style>
    </head>
    <body>
        <h1>üöÄ Test API - Send Last Payment</h1>
        <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É –≤ Telegram –∏ Slack:</p>
        
        <button id="sendButton" class="button" onclick="sendLastPayment()">
            üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É
        </button>
        
        <div id="result"></div>

        <script>
            async function sendLastPayment() {
                const button = document.getElementById('sendButton');
                const result = document.getElementById('result');
                
                button.disabled = true;
                button.textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
                result.innerHTML = '';
                
                try {
                    const response = await fetch('/api/send-last-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        result.className = 'result success';
                        result.innerHTML = \`‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û!
                        
üì± Telegram: \${data.telegram ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}
üí¨ Slack: \${data.slack ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}

üí≥ –ü–ª–∞—Ç–µ–∂: \${data.payment_id}
üìß Email: \${data.customer_email}

üéâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã!\`;
                    } else {
                        result.className = 'result error';
                        result.innerHTML = \`‚ùå –û–®–ò–ë–ö–ê: \${data.message}\`;
                    }
                } catch (error) {
                    result.className = 'result error';
                    result.innerHTML = \`‚ùå –û–®–ò–ë–ö–ê –°–ï–¢–ò: \${error.message}\`;
                } finally {
                    button.disabled = false;
                    button.textContent = 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É';
                }
            }
        </script>
    </body>
    </html>
  `);
});

// API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
app.post('/api/send-last-payment', async (req, res) => {
  try {
    console.log('üöÄ API: –û–¢–ü–†–ê–í–ö–ê –ü–û–°–õ–ï–î–ù–ï–ô –ü–û–ö–£–ü–ö–ò...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂
    const payments = await stripe.paymentIntents.list({ limit: 1 });
    
    if (payments.data.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: '–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' 
      });
    }
    
    const payment = payments.data[0];
    const customer = await stripe.customers.retrieve(payment.customer);
    const metadata = customer?.metadata || {};
    
    console.log(`üí≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂: ${payment.id}`);
    console.log(`üìß Email: ${customer?.email || '–ù–ï–¢'}`);
    console.log(`üåç UTM Source: ${metadata.utm_source || '–ù–ï–¢'}`);
    console.log(`üì± Ad Name: ${metadata.ad_name || '–ù–ï–¢'}`);
    console.log(`üéØ Campaign: ${metadata.utm_campaign || '–ù–ï–¢'}`);
    console.log(`üåç Geo Country: ${metadata.geo_country || '–ù–ï–¢'}`);
    console.log(`üèôÔ∏è Geo City: ${metadata.geo_city || '–ù–ï–¢'}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const amount = payment.amount / 100;
    const currency = payment.currency.toUpperCase();
    const email = customer?.email || 'N/A';
    const country = metadata.geo_country || 'US';
    const orderId = Math.random().toString(36).substring(2, 15);
    
    const telegramMessage = `üü¢ Order ${orderId} was processed!
---------------------------
üí≥ card
üí∞ ${amount} ${currency}
üè∑Ô∏è ${metadata.product_tag || 'N/A'}
---------------------------
üìß ${email}
---------------------------
üå™Ô∏è ${orderId.substring(0, 6)}
üìç ${country}
üßç${metadata.gender || 'N/A'} ${metadata.age || 'N/A'}
üîó ${metadata.creative_link || 'N/A'}
${metadata.utm_source || 'N/A'}
${metadata.utm_medium || 'N/A'}
${metadata.ad_name || 'N/A'}
${metadata.adset_name || 'N/A'}
${metadata.utm_campaign || 'N/A'}`;

    const slackMessage = `:large_green_circle: Order ${orderId.substring(0, 8)}... processed!
---------------------------
:credit_card: card
:moneybag: ${amount} ${currency}
:label: ${metadata.product_tag || 'N/A'}
---------------------------
:e-mail: ${email}
---------------------------
:round_pushpin: ${country}
:standing_person: ${metadata.gender || 'N/A'} ${metadata.age || 'N/A'}
:link: ${metadata.creative_link || 'N/A'}
${metadata.utm_source || 'N/A'}
${metadata.utm_medium || 'N/A'}
${metadata.ad_name || 'N/A'}
${metadata.adset_name || 'N/A'}
${metadata.utm_campaign || 'N/A'}`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    console.log('\nüì± –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í TELEGRAM...');
    let telegramSent = false;
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      try {
        const telegramResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: process.env.TELEGRAM_CHAT_ID,
            text: telegramMessage,
            disable_web_page_preview: true
          })
        });
        const telegramData = await telegramResponse.json();
        telegramSent = telegramData.ok;
        console.log(`‚úÖ Telegram: ${telegramSent ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}`);
      } catch (error) {
        console.log('‚ùå Telegram error:', error.message);
      }
    } else {
      console.log('‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Slack
    console.log('\nüí¨ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í SLACK...');
    let slackSent = false;
    if (process.env.SLACK_WEBHOOK_URL) {
      try {
        const slackResponse = await fetch(process.env.SLACK_WEBHOOK_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ text: slackMessage })
        });
        slackSent = slackResponse.ok;
        console.log(`‚úÖ Slack: ${slackSent ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}`);
      } catch (error) {
        console.log('‚ùå Slack error:', error.message);
      }
    } else {
      console.log('‚ùå Slack –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log(`‚úÖ Telegram: ${telegramSent ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}`);
    console.log(`‚úÖ Slack: ${slackSent ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}`);
    
    if (telegramSent || slackSent) {
      console.log('\nüéâ –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ö–£–ü–ö–ê –û–¢–ü–†–ê–í–õ–ï–ù–ê!');
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã');
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      
      return res.status(200).json({ 
        success: true, 
        message: '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
        telegram: telegramSent,
        slack: slackSent,
        payment_id: payment.id,
        customer_email: customer?.email || 'N/A'
      });
    } else {
      console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Render');
      
      return res.status(500).json({ 
        success: false, 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        telegram: telegramSent,
        slack: slackSent
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
    return res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message 
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});
