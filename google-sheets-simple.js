import Stripe from 'stripe';
import fetch from 'node-fetch';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

async function exportToGoogleSheets() {
  try {
    console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    const payments = await stripe.paymentIntents.list({ limit: 5 });
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${payments.data.length} –ø–ª–∞—Ç–µ–∂–µ–π`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π CSV
    let csv = 'Payment ID,Amount,Currency,Status,Created,Customer ID,Customer Email,UTM Source,UTM Medium,UTM Campaign\n';
    
    for (const payment of payments.data) {
      const customer = await stripe.customers.retrieve(payment.customer);
      const metadata = customer?.metadata || {};
      
      csv += [
        payment.id,
        `$${(payment.amount / 100).toFixed(2)}`,
        payment.currency.toUpperCase(),
        payment.status,
        new Date(payment.created * 1000).toLocaleString(),
        customer?.id || 'N/A',
        customer?.email || 'N/A',
        metadata.utm_source || 'N/A',
        metadata.utm_medium || 'N/A',
        metadata.utm_campaign || 'N/A'
      ].join(',') + '\n';
    }
    
    console.log('üìù CSV –¥–∞–Ω–Ω—ã–µ:');
    console.log(csv);
    
    console.log(`üéâ –ì–û–¢–û–í–û! ${payments.data.length} –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ`);
    console.log(`üìä –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ Google Sheets`);
    console.log(`üîó https://docs.google.com/spreadsheets/d/${process.env.GOOGLE_SHEETS_DOC_ID}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

exportToGoogleSheets();
