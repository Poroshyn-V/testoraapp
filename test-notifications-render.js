import Stripe from 'stripe';
import fetch from 'node-fetch';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ sync-payments.js
function formatTelegram(payment, customer = null) {
  const amount = payment.amount / 100;
  const currency = payment.currency.toUpperCase();
  const email = customer?.email || 'N/A';
  const metadata = customer?.metadata || {};
  const country = metadata.geo_country || 'US';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
  const orderId = Math.random().toString(36).substring(2, 15);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
  const gender = metadata.gender || 'N/A';
  const age = metadata.age || 'N/A';
  const creativeLink = metadata.creative_link || 'N/A';
  const platform = metadata.utm_source || 'N/A';
  const placement = metadata.utm_medium || 'N/A';
  const adName = metadata.ad_name || 'N/A';
  const adsetName = metadata.adset_name || 'N/A';
  const campaignName = metadata.utm_campaign || 'N/A';
  const productTag = metadata.product_tag || 'N/A';
  
  return `üü¢ Order ${orderId} was processed!
---------------------------
üí≥ card
üí∞ ${amount} ${currency}
üè∑Ô∏è ${productTag}
---------------------------
üìß ${email}
---------------------------
üå™Ô∏è ${orderId.substring(0, 6)}
üìç ${country}
üßç${gender} ${age}
üîó ${creativeLink}
${platform}
${placement}
${adName}
${adsetName}
${campaignName}`;
}

function formatSlack(payment, customer = null) {
  const amount = payment.amount / 100;
  const currency = payment.currency.toUpperCase();
  const email = customer?.email || 'N/A';
  const metadata = customer?.metadata || {};
  const country = metadata.geo_country || 'US';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
  const orderId = Math.random().toString(36).substring(2, 15);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
  const gender = metadata.gender || 'N/A';
  const age = metadata.age || 'N/A';
  const creativeLink = metadata.creative_link || 'N/A';
  const platform = metadata.utm_source || 'N/A';
  const placement = metadata.utm_medium || 'N/A';
  const adName = metadata.ad_name || 'N/A';
  const adsetName = metadata.adset_name || 'N/A';
  const campaignName = metadata.utm_campaign || 'N/A';
  const productTag = metadata.product_tag || 'N/A';
  
  return `:large_green_circle: Order ${orderId.substring(0, 8)}... processed!
---------------------------
:credit_card: card
:moneybag: ${amount} ${currency}
:label: ${productTag}
---------------------------
:e-mail: ${email}
---------------------------
:round_pushpin: ${country}
:standing_person: ${gender} ${age}
:link: ${creativeLink}
${platform}
${placement}
${adName}
${adsetName}
${campaignName}`;
}

async function sendTelegram(text) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
  
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.log('‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return false;
  }
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: text,
        disable_web_page_preview: true
      })
    });
    
    const data = await response.json();
    if (data.ok) {
      console.log('‚úÖ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      return true;
    } else {
      console.log('‚ùå Telegram error:', data.description);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Telegram error:', error.message);
    return false;
  }
}

async function sendSlack(text) {
  const SLACK_WEBHOOK_URL = process.env.SLACK_WEBHOOK_URL;
  
  if (!SLACK_WEBHOOK_URL) {
    console.log('‚ùå Slack –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return false;
  }
  
  try {
    const response = await fetch(SLACK_WEBHOOK_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text: text })
    });
    
    if (response.ok) {
      console.log('‚úÖ Slack –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      return true;
    } else {
      console.log('‚ùå Slack error:', response.statusText);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Slack error:', error.message);
    return false;
  }
}

async function testNotifications() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ù–ê RENDER...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂
    const payments = await stripe.paymentIntents.list({ limit: 1 });
    
    if (payments.data.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const payment = payments.data[0];
    const customer = await stripe.customers.retrieve(payment.customer);
    const metadata = customer?.metadata || {};
    
    console.log(`üí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–ª–∞—Ç–µ–∂–æ–º: ${payment.id}`);
    console.log(`üìß Email: ${customer?.email || '–ù–ï–¢'}`);
    console.log(`üåç UTM Source: ${metadata.utm_source || '–ù–ï–¢'}`);
    console.log(`üì± Ad Name: ${metadata.ad_name || '–ù–ï–¢'}`);
    console.log(`üéØ Campaign: ${metadata.utm_campaign || '–ù–ï–¢'}`);
    console.log(`üåç Geo Country: ${metadata.geo_country || '–ù–ï–¢'}`);
    console.log(`üèôÔ∏è Geo City: ${metadata.geo_city || '–ù–ï–¢'}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const telegramMessage = formatTelegram(payment, customer);
    const slackMessage = formatSlack(payment, customer);
    
    console.log('\nüì± TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:');
    console.log('================================');
    console.log(telegramMessage);
    console.log('================================');
    
    console.log('\nüí¨ SLACK –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:');
    console.log('================================');
    console.log(slackMessage);
    console.log('================================');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    console.log('\nüì± –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í TELEGRAM...');
    const telegramSent = await sendTelegram(telegramMessage);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Slack
    console.log('\nüí¨ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í SLACK...');
    const slackSent = await sendSlack(slackMessage);
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log(`‚úÖ Telegram: ${telegramSent ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}`);
    console.log(`‚úÖ Slack: ${slackSent ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}`);
    
    if (telegramSent || slackSent) {
      console.log('\nüéâ –¢–ï–°–¢–û–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–´!');
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã');
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
    } else {
      console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Render');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testNotifications();
