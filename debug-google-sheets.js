import Stripe from 'stripe';
import fetch from 'node-fetch';
import crypto from 'crypto';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

async function debugGoogleSheets() {
  try {
    console.log('üîç –î–ï–ë–ê–ì GOOGLE SHEETS –ò –ì–ï–û –î–ê–ù–ù–´–•...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    const payments = await stripe.paymentIntents.list({ limit: 3 });
    
    for (const payment of payments.data) {
      console.log(`\nüí≥ –ü–ª–∞—Ç–µ–∂: ${payment.id}`);
      console.log(`   Amount: $${(payment.amount / 100).toFixed(2)}`);
      console.log(`   Status: ${payment.status}`);
      
      if (payment.customer) {
        const customer = await stripe.customers.retrieve(payment.customer);
        const metadata = customer?.metadata || {};
        
        console.log(`   Customer Email: ${customer?.email || '–ù–ï–¢'}`);
        console.log(`   UTM Source: ${metadata.utm_source || '–ù–ï–¢'}`);
        console.log(`   UTM Campaign: ${metadata.utm_campaign || '–ù–ï–¢'}`);
        console.log(`   Ad Name: ${metadata.ad_name || '–ù–ï–¢'}`);
        console.log(`   IP Address: ${metadata.ip_address || '–ù–ï–¢'}`);
        console.log(`   Geo Country: ${metadata.geo_country || '–ù–ï–¢'}`);
        console.log(`   Geo City: ${metadata.geo_city || '–ù–ï–¢'}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ì–ï–û –ø–æ IP
        const ipAddress = metadata.ip_address;
        if (ipAddress && ipAddress !== 'N/A' && !ipAddress.includes(':')) {
          try {
            console.log(`   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ì–ï–û –¥–ª—è IP: ${ipAddress}`);
            const geoResponse = await fetch(`https://ipinfo.io/${ipAddress}/json`);
            const geoData = await geoResponse.json();
            console.log(`   üåç –ì–ï–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, geoData);
            
            const country = geoData.country || 'N/A';
            const city = geoData.city || 'N/A';
            const geo = `${country}, ${city}`;
            console.log(`   üìç –ò—Ç–æ–≥–æ–≤—ã–π –ì–ï–û: ${geo}`);
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ì–ï–û: ${error.message}`);
          }
        } else {
          console.log(`   ‚ö†Ô∏è IP –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ì–ï–û: ${ipAddress}`);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

debugGoogleSheets();
