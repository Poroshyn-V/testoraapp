import Stripe from 'stripe';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { config } from 'dotenv';

config();

const ENV = {
  STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,
  GOOGLE_SERVICE_EMAIL: process.env.GOOGLE_SERVICE_EMAIL,
  GOOGLE_SERVICE_PRIVATE_KEY: (process.env.GOOGLE_SERVICE_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
  GOOGLE_SHEETS_DOC_ID: process.env.GOOGLE_SHEETS_DOC_ID
};

async function simpleRestoreAll() {
  try {
    console.log('üöÄ –ü–†–û–°–¢–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–ï–†–í–´–• –ü–û–ö–£–ü–û–ö');
    console.log('==============================================');
    
    const stripe = new Stripe(ENV.STRIPE_SECRET_KEY);
    
    const serviceAccountAuth = new JWT({
      email: ENV.GOOGLE_SERVICE_EMAIL,
      key: ENV.GOOGLE_SERVICE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(ENV.GOOGLE_SHEETS_DOC_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    await sheet.loadHeaderRow();
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É...');
    await sheet.clearRows();
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ Stripe
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ Stripe...');
    const allPayments = [];
    let hasMore = true;
    let startingAfter = null;
    
    while (hasMore) {
      const params = { limit: 100 };
      if (startingAfter) params.starting_after = startingAfter;
      
      const payments = await stripe.paymentIntents.list(params);
      allPayments.push(...payments.data);
      
      hasMore = payments.has_more;
      if (hasMore) startingAfter = payments.data[payments.data.length - 1].id;
      
      console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π...`);
    }
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${allPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ Stripe`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –¢–û–õ–¨–ö–û "Subscription creation" –∏ —É—Å–ø–µ—à–Ω—ã–µ
    const validPayments = allPayments.filter(p => {
      if (p.status !== 'succeeded' || !p.customer) return false;
      if (!p.description) return false;
      return p.description.toLowerCase().includes('subscription creation');
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${validPayments.length} "Subscription creation" –ø–ª–∞—Ç–µ–∂–µ–π`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ü–ï–†–í–£–Æ –ø–æ–∫—É–ø–∫—É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞)
    const customerFirstPurchases = new Map();
    
    for (const payment of validPayments) {
      try {
        const customer = await stripe.customers.retrieve(payment.customer);
        if (customer && 'deleted' in customer && customer.deleted) continue;
        
        const customerId = customer?.id;
        const customerEmail = customer?.email;
        
        if (!customerId || !customerEmail) continue;
        
        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –∏–ª–∏ —ç—Ç–∞ –ø–æ–∫—É–ø–∫–∞ —Ä–∞–Ω—å—à–µ
        if (!customerFirstPurchases.has(customerId) || 
            payment.created < customerFirstPurchases.get(customerId).created) {
          customerFirstPurchases.set(customerId, {
            payment,
            customer,
            email: customerEmail
          });
        }
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ${payment.customer}:`, error.message);
      }
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${customerFirstPurchases.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–µ—Ä–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    const tableData = [];
    
    for (const [customerId, data] of customerFirstPurchases) {
      const { payment, customer, email } = data;
      
      // –ü–æ–ª—É—á–∞–µ–º GEO –¥–∞–Ω–Ω—ã–µ
      const country = customer.metadata?.country || customer.address?.country || 'Unknown';
      const city = customer.metadata?.city || customer.address?.city || 'Unknown';
      
      const purchaseData = {
        'Payment Intent IDs': payment.id,
        'Purchase ID': `purchase_${customerId}_${payment.created}`,
        'Total Amount': (payment.amount / 100).toFixed(2),
        'Currency': payment.currency.toUpperCase(),
        'Status': 'succeeded',
        'Created UTC': new Date(payment.created * 1000).toISOString(),
        'Created Local (UTC+1)': new Date(payment.created * 1000 + 60 * 60 * 1000)
          .toISOString()
          .replace('T', ' ')
          .replace('Z', ' UTC+1'),
        'Customer ID': customerId,
        'Email': email,
        'GEO': `${country}, ${city}`,
        'UTM Source': customer.metadata?.utm_source || 'N/A',
        'UTM Medium': customer.metadata?.utm_medium || 'N/A',
        'UTM Campaign': customer.metadata?.utm_campaign || 'N/A',
        'UTM Content': customer.metadata?.utm_content || 'N/A',
        'UTM Term': customer.metadata?.utm_term || 'N/A',
        'Ad Name': customer.metadata?.ad_name || 'N/A',
        'Adset Name': customer.metadata?.adset_name || 'N/A',
        'Payment Count': '1'
      };
      
      tableData.push(purchaseData);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    tableData.sort((a, b) => new Date(b['Created UTC']) - new Date(a['Created UTC']));
    
    console.log(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${tableData.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–ª–∫–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
    const batchSize = 50;
    let addedCount = 0;
    
    for (let i = 0; i < tableData.length; i += batchSize) {
      const batch = tableData.slice(i, i + batchSize);
      
      console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç ${Math.floor(i/batchSize) + 1}/${Math.ceil(tableData.length/batchSize)} (${batch.length} –∑–∞–ø–∏—Å–µ–π)...`);
      
      try {
        await sheet.addRows(batch);
        addedCount += batch.length;
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount}/${tableData.length} –∑–∞–ø–∏—Å–µ–π`);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞:`, error.message);
      }
    }
    
    console.log('==============================================');
    console.log('üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫`);
    console.log(`üí≥ Payment Intent IDs —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π`);
    console.log(`üåç GEO –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã`);
    console.log(`üîÑ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (1 –∫–ª–∏–µ–Ω—Ç = 1 –∑–∞–ø–∏—Å—å)`);
    console.log(`üö´ –¢–æ–ª—å–∫–æ "Subscription creation" –ø–ª–∞—Ç–µ–∂–∏`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

simpleRestoreAll();
