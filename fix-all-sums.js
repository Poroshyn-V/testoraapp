// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É–º–º –≤ Google Sheets –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Stripe
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import Stripe from 'stripe';
import dotenv from 'dotenv';

dotenv.config();

const ENV = {
  GOOGLE_SERVICE_EMAIL: process.env.GOOGLE_SERVICE_EMAIL,
  GOOGLE_SERVICE_PRIVATE_KEY: process.env.GOOGLE_SERVICE_PRIVATE_KEY,
  GOOGLE_SHEETS_DOC_ID: process.env.GOOGLE_SHEETS_DOC_ID,
  STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY
};

const stripe = new Stripe(ENV.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

async function fixAllSums() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –í–°–ï —Å—É–º–º—ã –≤ Google Sheets –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Stripe...');
    
    if (!ENV.GOOGLE_SERVICE_EMAIL || !ENV.GOOGLE_SERVICE_PRIVATE_KEY || !ENV.GOOGLE_SHEETS_DOC_ID) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    const serviceAccountAuth = new JWT({
      email: ENV.GOOGLE_SERVICE_EMAIL,
      key: ENV.GOOGLE_SERVICE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(ENV.GOOGLE_SHEETS_DOC_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    const rows = await sheet.getRows();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    let fixedCount = 0;
    let errorCount = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const customerId = row.get('Customer ID');
      const email = row.get('Email');
      const currentAmount = row.get('Total Amount');
      const currentPaymentCount = row.get('Payment Count');
      
      if (!customerId || customerId === 'N/A' || !email || email === 'N/A') {
        console.log(`‚è≠Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1}: –ø—Ä–æ–ø—É—Å–∫–∞—é - –Ω–µ—Ç Customer ID –∏–ª–∏ Email`);
        continue;
      }
      
      console.log(`\nüîç –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${email} (${customerId})`);
      console.log(`  –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: $${currentAmount} (${currentPaymentCount} –ø–ª–∞—Ç–µ–∂–µ–π)`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–ª–∞—Ç–µ–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Stripe
        const payments = await stripe.paymentIntents.list({
          customer: customerId,
          limit: 100
        });
        
        const successfulPayments = payments.data.filter(p => {
          if (p.status !== 'succeeded' || !p.customer) return false;
          if (p.description && p.description.toLowerCase().includes('subscription update')) {
            return false;
          }
          return true;
        });
        
        console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ ${successfulPayments.length} —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ Stripe`);
        
        if (successfulPayments.length === 0) {
          console.log(`  ‚ö†Ô∏è –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ Stripe - –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å`);
          continue;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤
        const groupedPayments = [];
        const processedPayments = new Set();
        
        for (const payment of successfulPayments) {
          if (processedPayments.has(payment.id)) continue;
          
          const group = [payment];
          processedPayments.add(payment.id);
          
          for (const otherPayment of successfulPayments) {
            if (processedPayments.has(otherPayment.id)) continue;
            
            const timeDiff = Math.abs(payment.created - otherPayment.created);
            const hoursDiff = timeDiff / 3600;
            
            if (hoursDiff <= 3) {
              group.push(otherPayment);
              processedPayments.add(otherPayment.id);
            }
          }
          
          groupedPayments.push(group);
        }
        
        console.log(`  üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${groupedPayments.length} –≥—Ä—É–ø–ø`);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ï —Å—É–º–º—ã
        let correctTotalAmount = 0;
        let correctPaymentCount = 0;
        const correctPaymentIds = [];
        
        for (const group of groupedPayments) {
          for (const payment of group) {
            correctTotalAmount += payment.amount;
            correctPaymentCount++;
            correctPaymentIds.push(payment.id);
          }
        }
        
        const correctTotalAmountFormatted = (correctTotalAmount / 100).toFixed(2);
        const correctPaymentIdsString = correctPaymentIds.join(', ');
        
        console.log(`  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞: $${correctTotalAmountFormatted} (${correctPaymentCount} –ø–ª–∞—Ç–µ–∂–µ–π)`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const currentAmountNum = parseFloat(currentAmount || '0');
        const correctAmountNum = correctTotalAmount / 100;
        const currentCountNum = parseInt(currentPaymentCount || '0');
        
        if (Math.abs(currentAmountNum - correctAmountNum) > 0.01 || currentCountNum !== correctPaymentCount) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
          row.set('Total Amount', correctTotalAmountFormatted);
          row.set('Payment Count', correctPaymentCount.toString());
          row.set('Payment Intent IDs', correctPaymentIdsString);
          
          await row.save();
          console.log(`  üíæ –û–ë–ù–û–í–õ–ï–ù–û: $${currentAmount} -> $${correctTotalAmountFormatted}`);
          console.log(`  üíæ –û–ë–ù–û–í–õ–ï–ù–û: ${currentPaymentCount} -> ${correctPaymentCount} –ø–ª–∞—Ç–µ–∂–µ–π`);
          fixedCount++;
        } else {
          console.log(`  ‚úÖ –°—É–º–º–∞ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è`);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${rows.length}`);
    console.log(`  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
    console.log(`  –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É–º–º:', error.message);
  }
}

fixAllSums();
