import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { config } from 'dotenv';

config();

const ENV = {
  GOOGLE_SERVICE_EMAIL: process.env.GOOGLE_SERVICE_EMAIL,
  GOOGLE_SERVICE_PRIVATE_KEY: (process.env.GOOGLE_SERVICE_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
  GOOGLE_SHEETS_DOC_ID: process.env.GOOGLE_SHEETS_DOC_ID
};

async function checkRecentRecords() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ó–ê–ü–ò–°–ï–ô');
    console.log('==============================');
    
    const serviceAccountAuth = new JWT({
      email: ENV.GOOGLE_SERVICE_EMAIL,
      key: ENV.GOOGLE_SERVICE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(ENV.GOOGLE_SHEETS_DOC_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    await sheet.loadHeaderRow();
    const rows = await sheet.getRows();
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${rows.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
    const recentRows = rows.slice(-20);
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${recentRows.length} –∑–∞–ø–∏—Å–µ–π:`);
    
    let emptyFieldsCount = 0;
    const emptyFields = {};
    
    for (let i = 0; i < recentRows.length; i++) {
      const row = recentRows[i];
      const email = row.get('Email');
      const created = row.get('Created UTC');
      
      console.log(`\nüìß ${email} (${created}):`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
      const keyFields = ['Total Amount', 'Currency', 'Status', 'GEO', 'UTM Source', 'UTM Medium', 'UTM Campaign'];
      
      for (const field of keyFields) {
        const value = row.get(field);
        if (!value || value === '' || value === 'undefined' || value === 'N/A') {
          console.log(`   ‚ùå ${field}: "${value}"`);
          emptyFieldsCount++;
          if (!emptyFields[field]) emptyFields[field] = 0;
          emptyFields[field]++;
        } else {
          console.log(`   ‚úÖ ${field}: "${value}"`);
        }
      }
    }
    
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–£–°–¢–´–• –ü–û–õ–ï–ô –í –ü–û–°–õ–ï–î–ù–ò–• –ó–ê–ü–ò–°–Ø–•:');
    console.log(`–í—Å–µ–≥–æ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π: ${emptyFieldsCount}`);
    
    if (Object.keys(emptyFields).length > 0) {
      console.log('\n–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è:');
      Object.entries(emptyFields).forEach(([field, count]) => {
        console.log(`   ${field}: ${count} –ø—É—Å—Ç—ã—Ö`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkRecentRecords();
