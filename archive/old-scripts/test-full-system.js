import Stripe from 'stripe';
import fetch from 'node-fetch';
import crypto from 'crypto';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

async function testFullSystem() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–´...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Stripe API
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê STRIPE API...');
    const payments = await stripe.paymentIntents.list({ limit: 3 });
    console.log(`‚úÖ Stripe API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${payments.data.length} –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞–π–¥–µ–Ω–æ`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Sheets API
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê GOOGLE SHEETS API...');
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const header = {
      "alg": "RS256",
      "typ": "JWT"
    };
    
    const now = Math.floor(Date.now() / 1000);
    const payload = {
      iss: process.env.GOOGLE_SERVICE_EMAIL,
      scope: 'https://www.googleapis.com/auth/spreadsheets',
      aud: 'https://oauth2.googleapis.com/token',
      iat: now,
      exp: now + 3600
    };
    
    const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');
    const encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64url');
    
    const privateKey = process.env.GOOGLE_SERVICE_PRIVATE_KEY.replace(/\\n/g, '\n');
    const sign = crypto.createSign('RSA-SHA256');
    sign.update(`${encodedHeader}.${encodedPayload}`);
    const signature = sign.sign(privateKey, 'base64url');
    
    const token = `${encodedHeader}.${encodedPayload}.${signature}`;
    
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=${token}`
    });
    
    const tokenData = await tokenResponse.json();
    
    if (tokenData.error) {
      console.log(`‚ùå Google Sheets API –æ—à–∏–±–∫–∞: ${tokenData.error_description}`);
    } else {
      console.log('‚úÖ Google Sheets API —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TELEGRAM API...');
    const telegramResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`);
    const telegramData = await telegramResponse.json();
    
    if (telegramData.ok) {
      console.log(`‚úÖ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç: @${telegramData.result.username}`);
    } else {
      console.log(`‚ùå Telegram API –æ—à–∏–±–∫–∞: ${telegramData.description}`);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Slack API
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê SLACK API...');
    const slackResponse = await fetch('https://slack.com/api/auth.test', {
      headers: {
        'Authorization': `Bearer ${process.env.SLACK_BOT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    const slackData = await slackResponse.json();
    
    if (slackData.ok) {
      console.log(`‚úÖ Slack API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${slackData.user}`);
    } else {
      console.log(`‚ùå Slack API –æ—à–∏–±–∫–∞: ${slackData.error}`);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø...');
    const envVars = [
      'STRIPE_SECRET_KEY',
      'GOOGLE_SHEETS_DOC_ID',
      'GOOGLE_SERVICE_EMAIL',
      'GOOGLE_SERVICE_PRIVATE_KEY',
      'TELEGRAM_BOT_TOKEN',
      'TELEGRAM_CHAT_ID',
      'SLACK_BOT_TOKEN',
      'SLACK_CHANNEL_ID'
    ];
    
    for (const envVar of envVars) {
      const value = process.env[envVar];
      if (value && value.trim()) {
        console.log(`‚úÖ ${envVar}: ${value.substring(0, 10)}...`);
      } else {
        console.log(`‚ùå ${envVar}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
      }
    }
    
    console.log('\nüéØ –†–ï–ó–Æ–ú–ï:');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ');
    console.log('‚úÖ –í—Å–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testFullSystem();
