import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { config } from 'dotenv';

config();

const ENV = {
  GOOGLE_SERVICE_EMAIL: process.env.GOOGLE_SERVICE_EMAIL,
  GOOGLE_SERVICE_PRIVATE_KEY: (process.env.GOOGLE_SERVICE_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
  GOOGLE_SHEETS_DOC_ID: process.env.GOOGLE_SHEETS_DOC_ID
};

async function checkBotMapping() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ö–û–î–ê –ë–û–¢–ê –ò –¢–ê–ë–õ–ò–¶–´');
    console.log('==============================================');
    
    const serviceAccountAuth = new JWT({
      email: ENV.GOOGLE_SERVICE_EMAIL,
      key: ENV.GOOGLE_SERVICE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(ENV.GOOGLE_SHEETS_DOC_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    await sheet.loadHeaderRow();
    
    // –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    const actualColumns = sheet.headerValues;
    console.log('üìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:');
    actualColumns.forEach((col, i) => console.log(`   ${i + 1}. "${col}"`));
    
    // –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç (–∏–∑ –∫–æ–¥–∞)
    const botColumns = [
      'Purchase ID',
      'Payment Intent IDs', 
      'Total Amount',
      'Currency',
      'Status',
      'Created UTC',
      'Created Local (UTC+1)',
      'Customer ID',
      'Email',
      'GEO',
      'UTM Source',
      'UTM Medium',
      'UTM Campaign',
      'UTM Content',
      'UTM Term',
      'Ad Name',
      'Adset Name',
      'Payment Count'
    ];
    
    console.log('\nü§ñ –ö–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç:');
    botColumns.forEach((col, i) => console.log(`   ${i + 1}. "${col}"`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:');
    let allMatch = true;
    
    for (const botCol of botColumns) {
      if (actualColumns.includes(botCol)) {
        console.log(`   ‚úÖ "${botCol}" - –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ`);
      } else {
        console.log(`   ‚ùå "${botCol}" - –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ!`);
        allMatch = false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    console.log('\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–õ–û–ù–ö–ò –í –¢–ê–ë–õ–ò–¶–ï:');
    for (const actualCol of actualColumns) {
      if (!botColumns.includes(actualCol)) {
        console.log(`   ‚ö†Ô∏è "${actualCol}" - –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –±–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç`);
      }
    }
    
    if (allMatch) {
      console.log('\nüéâ –í–°–ï –ö–û–õ–û–ù–ö–ò –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢!');
    } else {
      console.log('\n‚ùå –ï–°–¢–¨ –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkBotMapping();
