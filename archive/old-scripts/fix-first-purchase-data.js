import Stripe from 'stripe';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { config } from 'dotenv';

config();

const ENV = {
  STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,
  GOOGLE_SERVICE_EMAIL: process.env.GOOGLE_SERVICE_EMAIL,
  GOOGLE_SERVICE_PRIVATE_KEY: (process.env.GOOGLE_SERVICE_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
  GOOGLE_SHEETS_DOC_ID: process.env.GOOGLE_SHEETS_DOC_ID
};

async function fixFirstPurchaseData() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–ï–†–í–û–ô –ü–û–ö–£–ü–ö–ò');
    console.log('=====================================');
    
    const stripe = new Stripe(ENV.STRIPE_SECRET_KEY);
    
    const serviceAccountAuth = new JWT({
      email: ENV.GOOGLE_SERVICE_EMAIL,
      key: ENV.GOOGLE_SERVICE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(ENV.GOOGLE_SHEETS_DOC_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    await sheet.loadHeaderRow();
    const rows = await sheet.getRows();
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${rows.length}`);
    
    let fixedCount = 0;
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const email = row.get('Email');
      const paymentIds = row.get('Payment Intent IDs') || '';
      
      if (!paymentIds) continue;
      
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è—é: ${email}`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const paymentIdList = paymentIds.split(', ').filter(id => id.trim());
        const payments = [];
        
        for (const paymentId of paymentIdList) {
          const payment = await stripe.paymentIntents.retrieve(paymentId);
          if (payment && payment.status === 'succeeded') {
            payments.push(payment);
          }
        }
        
        if (payments.length === 0) continue;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π = –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞)
        payments.sort((a, b) => a.created - b.created);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É (Subscription creation)
        let firstPurchase = null;
        for (const payment of payments) {
          if (payment.description && payment.description.toLowerCase().includes('subscription creation')) {
            firstPurchase = payment;
            break;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Subscription creation, –±–µ—Ä–µ–º —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
        if (!firstPurchase) {
          firstPurchase = payments[0];
        }
        
        console.log(`   –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: ${firstPurchase.id} - $${(firstPurchase.amount / 100).toFixed(2)} - ${firstPurchase.description}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å
        const currentAmount = row.get('Total Amount');
        const currentCreatedUtc = row.get('Created UTC');
        const currentCreatedLocal = row.get('Created Local (UTC+1)');
        
        const correctAmount = (firstPurchase.amount / 100).toFixed(2);
        const correctCreatedUtc = new Date(firstPurchase.created * 1000).toISOString();
        const correctCreatedLocal = new Date(firstPurchase.created * 1000 + 60 * 60 * 1000)
          .toISOString()
          .replace('T', ' ')
          .replace('Z', ' UTC+1');
        
        let needsUpdate = false;
        
        if (currentAmount !== correctAmount) {
          console.log(`   ‚ùå Amount: ${currentAmount} ‚Üí ${correctAmount}`);
          needsUpdate = true;
        }
        
        if (currentCreatedUtc !== correctCreatedUtc) {
          console.log(`   ‚ùå Created UTC: ${currentCreatedUtc} ‚Üí ${correctCreatedUtc}`);
          needsUpdate = true;
        }
        
        if (currentCreatedLocal !== correctCreatedLocal) {
          console.log(`   ‚ùå Created Local: ${currentCreatedLocal} ‚Üí ${correctCreatedLocal}`);
          needsUpdate = true;
        }
        
        if (needsUpdate) {
          row.set('Total Amount', correctAmount);
          row.set('Created UTC', correctCreatedUtc);
          row.set('Created Local (UTC+1)', correctCreatedLocal);
          
          await row.save();
          fixedCount++;
          console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${email}`);
        } else {
          console.log(`   ‚úÖ –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${email}`);
        }
        
        // –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
        if (i % 10 === 0 && i > 0) {
          console.log(`‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...`);
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${email}:`, error.message);
      }
    }
    
    console.log(`\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${fixedCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

fixFirstPurchaseData();
