import Stripe from 'stripe';
import dotenv from 'dotenv';

dotenv.config();

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || 'sk_test_key');

async function testStripeAPI() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ checkout —Å–µ—Å—Å–∏–∏...\n');
    
    const sessions = await stripe.checkout.sessions.list({
      limit: 5,
      status: 'complete'
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${sessions.data.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π:\n`);
    
    for (const session of sessions.data) {
      console.log('-------------------');
      console.log(`üÜî Session ID: ${session.id}`);
      console.log(`üí∞ Amount: ${((session.amount_total ?? 0) / 100).toFixed(2)} ${(session.currency || 'usd').toUpperCase()}`);
      console.log(`üìß Email: ${session.customer_details?.email || 'N/A'}`);
      console.log(`üìÖ Created: ${new Date(session.created * 1000).toLocaleString()}`);
      console.log(`üéØ Status: ${session.status}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
      if (session.metadata && Object.keys(session.metadata).length > 0) {
        console.log(`üìã Session Metadata: ${Object.keys(session.metadata).join(', ')}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º customer metadata
      if (session.customer) {
        try {
          const customer = await stripe.customers.retrieve(session.customer);
          if (customer && !customer.deleted && customer.metadata && Object.keys(customer.metadata).length > 0) {
            console.log(`üë§ Customer Metadata: ${Object.keys(customer.metadata).join(', ')}`);
          }
        } catch (err) {
          console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞`);
        }
      }
      console.log('');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testStripeAPI();
