import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

async function checkCustomerGeo() {
  try {
    console.log('üåç –ü–†–û–í–ï–†–ö–ê –ì–ï–û –î–ê–ù–ù–´–• –ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    const payments = await stripe.paymentIntents.list({ limit: 5 });
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${payments.data.length} –ø–ª–∞—Ç–µ–∂–µ–π`);
    
    for (const payment of payments.data) {
      console.log(`\nüí≥ –ü–ª–∞—Ç–µ–∂: ${payment.id}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
      const customer = await stripe.customers.retrieve(payment.customer);
      console.log(`   Customer ID: ${customer?.id || 'N/A'}`);
      console.log(`   Email: ${customer?.email || 'N/A'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
      if (customer?.address) {
        console.log(`   üìç –ê–¥—Ä–µ—Å:`);
        console.log(`      –°—Ç—Ä–∞–Ω–∞: ${customer.address.country || 'N/A'}`);
        console.log(`      –ì–æ—Ä–æ–¥: ${customer.address.city || 'N/A'}`);
        console.log(`      –®—Ç–∞—Ç: ${customer.address.state || 'N/A'}`);
        console.log(`      –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: ${customer.address.postal_code || 'N/A'}`);
        console.log(`      –ê–¥—Ä–µ—Å: ${customer.address.line1 || 'N/A'}`);
        console.log(`      –ê–¥—Ä–µ—Å 2: ${customer.address.line2 || 'N/A'}`);
      } else {
        console.log(`   üìç –ê–¥—Ä–µ—Å: –ù–ï –£–ö–ê–ó–ê–ù`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º shipping –∞–¥—Ä–µ—Å
      if (payment.shipping?.address) {
        console.log(`   üöö Shipping –∞–¥—Ä–µ—Å:`);
        console.log(`      –°—Ç—Ä–∞–Ω–∞: ${payment.shipping.address.country || 'N/A'}`);
        console.log(`      –ì–æ—Ä–æ–¥: ${payment.shipping.address.city || 'N/A'}`);
        console.log(`      –®—Ç–∞—Ç: ${payment.shipping.address.state || 'N/A'}`);
        console.log(`      –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: ${payment.shipping.address.postal_code || 'N/A'}`);
        console.log(`      –ê–¥—Ä–µ—Å: ${payment.shipping.address.line1 || 'N/A'}`);
      } else {
        console.log(`   üöö Shipping –∞–¥—Ä–µ—Å: –ù–ï –£–ö–ê–ó–ê–ù`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º billing –∞–¥—Ä–µ—Å
      if (payment.charges?.data?.[0]?.billing_details?.address) {
        const billingAddress = payment.charges.data[0].billing_details.address;
        console.log(`   üí≥ Billing –∞–¥—Ä–µ—Å:`);
        console.log(`      –°—Ç—Ä–∞–Ω–∞: ${billingAddress.country || 'N/A'}`);
        console.log(`      –ì–æ—Ä–æ–¥: ${billingAddress.city || 'N/A'}`);
        console.log(`      –®—Ç–∞—Ç: ${billingAddress.state || 'N/A'}`);
        console.log(`      –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: ${billingAddress.postal_code || 'N/A'}`);
        console.log(`      –ê–¥—Ä–µ—Å: ${billingAddress.line1 || 'N/A'}`);
      } else {
        console.log(`   üí≥ Billing –∞–¥—Ä–µ—Å: –ù–ï –£–ö–ê–ó–ê–ù`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ì–ï–û –¥–∞–Ω–Ω—ã—Ö
      const metadata = customer?.metadata || {};
      console.log(`   üè∑Ô∏è Metadata:`);
      console.log(`      –°—Ç—Ä–∞–Ω–∞: ${metadata.country || 'N/A'}`);
      console.log(`      –ì–æ—Ä–æ–¥: ${metadata.city || 'N/A'}`);
      console.log(`      –®—Ç–∞—Ç: ${metadata.state || 'N/A'}`);
      console.log(`      IP: ${metadata.ip_address || 'N/A'}`);
      console.log(`      User Agent: ${metadata.user_agent || 'N/A'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è customer
      console.log(`   üîç –í—Å–µ –ø–æ–ª—è customer:`);
      console.log(`      created: ${customer?.created || 'N/A'}`);
      console.log(`      default_source: ${customer?.default_source || 'N/A'}`);
      console.log(`      description: ${customer?.description || 'N/A'}`);
      console.log(`      livemode: ${customer?.livemode || 'N/A'}`);
      console.log(`      name: ${customer?.name || 'N/A'}`);
      console.log(`      phone: ${customer?.phone || 'N/A'}`);
      console.log(`      tax_exempt: ${customer?.tax_exempt || 'N/A'}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkCustomerGeo();
