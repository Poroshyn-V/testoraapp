import Stripe from 'stripe';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { config } from 'dotenv';

config();

const ENV = {
  STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,
  GOOGLE_SERVICE_EMAIL: process.env.GOOGLE_SERVICE_EMAIL,
  GOOGLE_SERVICE_PRIVATE_KEY: (process.env.GOOGLE_SERVICE_PRIVATE_KEY || '').replace(/\\n/g, '\n'),
  GOOGLE_SHEETS_DOC_ID: process.env.GOOGLE_SHEETS_DOC_ID
};

async function exportAllSimple() {
  try {
    console.log('üöÄ –ü–†–û–°–¢–ê–Ø –í–´–ì–†–£–ó–ö–ê –í–°–ï–• –ü–û–ö–£–ü–û–ö');
    console.log('==================================');
    
    const stripe = new Stripe(ENV.STRIPE_SECRET_KEY);
    
    const serviceAccountAuth = new JWT({
      email: ENV.GOOGLE_SERVICE_EMAIL,
      key: ENV.GOOGLE_SERVICE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(ENV.GOOGLE_SHEETS_DOC_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    await sheet.loadHeaderRow();
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É...');
    await sheet.clearRows();
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ Stripe
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ Stripe...');
    const allPayments = [];
    let hasMore = true;
    let startingAfter = null;
    
    while (hasMore) {
      const params = { limit: 100 };
      if (startingAfter) params.starting_after = startingAfter;
      
      const payments = await stripe.paymentIntents.list(params);
      allPayments.push(...payments.data);
      
      hasMore = payments.has_more;
      if (hasMore) startingAfter = payments.data[payments.data.length - 1].id;
      
      console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π...`);
    }
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${allPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ Stripe`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const validPayments = allPayments.filter(p => {
      return p.status === 'succeeded' && p.customer;
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${validPayments.length} —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const customerFirstPurchase = new Map();
    
    for (const payment of validPayments) {
      const customerId = payment.customer;
      
      if (!customerFirstPurchase.has(customerId) || 
          payment.created < customerFirstPurchase.get(customerId).created) {
        customerFirstPurchase.set(customerId, payment);
      }
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${customerFirstPurchase.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    console.log('üë• –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...');
    const customerData = new Map();
    const customerIds = Array.from(customerFirstPurchase.keys());
    
    for (let i = 0; i < customerIds.length; i += 50) {
      const batch = customerIds.slice(i, i + 50);
      
      console.log(`üë• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ ${i + 1}-${Math.min(i + 50, customerIds.length)}...`);
      
      for (const customerId of batch) {
        try {
          const customer = await stripe.customers.retrieve(customerId);
          if (customer && !('deleted' in customer && customer.deleted)) {
            customerData.set(customerId, customer);
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ${customerId}:`, error.message);
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ${customerData.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    const tableData = [];
    
    for (const [customerId, firstPayment] of customerFirstPurchase) {
      const customer = customerData.get(customerId);
      if (!customer) continue;
      
      // –ü–æ–ª—É—á–∞–µ–º GEO –¥–∞–Ω–Ω—ã–µ
      const country = customer.metadata?.country || customer.address?.country || 'Unknown';
      const city = customer.metadata?.city || customer.address?.city || 'Unknown';
      
      const purchaseData = {
        'Payment Intent IDs': firstPayment.id,
        'Purchase ID': `purchase_${customerId}_${firstPayment.created}`,
        'Total Amount': (firstPayment.amount / 100).toFixed(2),
        'Currency': firstPayment.currency.toUpperCase(),
        'Status': 'succeeded',
        'Created UTC': new Date(firstPayment.created * 1000).toISOString(),
        'Created Local (UTC+1)': new Date(firstPayment.created * 1000 + 60 * 60 * 1000)
          .toISOString()
          .replace('T', ' ')
          .replace('Z', ' UTC+1'),
        'Customer ID': customerId,
        'Email': customer.email || 'N/A',
        'GEO': `${country}, ${city}`,
        'UTM Source': customer.metadata?.utm_source || 'N/A',
        'UTM Medium': customer.metadata?.utm_medium || 'N/A',
        'UTM Campaign': customer.metadata?.utm_campaign || 'N/A',
        'UTM Content': customer.metadata?.utm_content || 'N/A',
        'UTM Term': customer.metadata?.utm_term || 'N/A',
        'Ad Name': customer.metadata?.ad_name || 'N/A',
        'Adset Name': customer.metadata?.adset_name || 'N/A',
        'Payment Count': '1'
      };
      
      tableData.push(purchaseData);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    tableData.sort((a, b) => new Date(b['Created UTC']) - new Date(a['Created UTC']));
    
    console.log(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${tableData.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (tableData.length > 0) {
      console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É...');
      await sheet.addRows(tableData);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${tableData.length} –∑–∞–ø–∏—Å–µ–π`);
    }
    
    console.log('==================================');
    console.log('üéâ –í–´–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${tableData.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìÖ –í—Å–µ –¥–∞—Ç—ã - —ç—Ç–æ –¥–∞—Ç—ã –ü–ï–†–í–´–• –ø–æ–∫—É–ø–æ–∫`);
    console.log(`üí≥ Payment Intent IDs —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
    console.log(`üåç GEO –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

exportAllSimple();
