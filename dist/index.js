import express from 'express';
import pino from 'pino';
import webhookRouter from './api/stripe-webhook.js';
import createCheckoutRouter from './api/create-checkout.js';
import sendLastPaymentRouter from './api/send-last-payment.js';
import syncPaymentsRouter from './api/sync-payments-endpoint.js';
import { ENV } from './lib/env.js';
const app = express();
const logger = pino({ level: 'info' });
app.get('/health', (_req, res) => res.status(200).send('ok'));
// Success page
app.get('/success', (_req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</title>
      <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .success { color: green; font-size: 24px; }
        .info { color: #666; margin-top: 20px; }
      </style>
    </head>
    <body>
      <div class="success">‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</div>
      <div class="info">
        <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –∏ Slack</p>
        <p>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets</p>
      </div>
    </body>
    </html>
  `);
});
// Cancel page
app.get('/cancel', (_req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</title>
      <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .cancel { color: red; font-size: 24px; }
      </style>
    </head>
    <body>
      <div class="cancel">‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</div>
    </body>
    </html>
  `);
});
// Test API page
app.get('/test', (_req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Test API - Send Last Payment</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                background: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 {
                color: #333;
                text-align: center;
            }
            .button {
                background: #007bff;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                width: 100%;
                margin: 20px 0;
            }
            .button:hover {
                background: #0056b3;
            }
            .button:disabled {
                background: #ccc;
                cursor: not-allowed;
            }
            .button.sync {
                background: #28a745;
            }
            .button.sync:hover {
                background: #218838;
            }
            .result {
                margin-top: 20px;
                padding: 15px;
                border-radius: 5px;
                white-space: pre-wrap;
            }
            .success {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            .error {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ Test API - Payment Operations</h1>
            
            <p><strong>üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets:</strong></p>
            <button id="syncButton" class="button sync" onclick="syncPayments()">
                üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏
            </button>
            
            <hr style="margin: 30px 0;">
            
            <p><strong>üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–µ:</strong></p>
            <button id="sendButton" class="button" onclick="sendLastPayment()">
                üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É
            </button>
            
            <div id="result"></div>
        </div>

        <script>
            async function syncPayments() {
                const button = document.getElementById('syncButton');
                const result = document.getElementById('result');
                
                button.disabled = true;
                button.textContent = '‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
                result.innerHTML = '';
                
                try {
                    const response = await fetch('/api/sync-payments', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        result.className = 'result success';
                        let paymentsHtml = '';
                        if (data.payments && data.payments.length > 0) {
                            paymentsHtml = '\\n\\nüìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:\\n' + 
                                data.payments.map(p => 
                                    \`- \${p.session_id}: \${p.email} (\${p.amount} USD)\`
                                ).join('\\n');
                        }
                        result.innerHTML = \`‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!
                        
üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: \${data.total_sessions}
‚ú® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: \${data.processed}\${paymentsHtml}

üéâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Sheets!\`;
                    } else {
                        result.className = 'result error';
                        result.innerHTML = \`‚ùå –û–®–ò–ë–ö–ê: \${data.message}\\n\${data.error || ''}\`;
                    }
                } catch (error) {
                    result.className = 'result error';
                    result.innerHTML = \`‚ùå –û–®–ò–ë–ö–ê –°–ï–¢–ò: \${error.message}\`;
                } finally {
                    button.disabled = false;
                    button.textContent = 'üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏';
                }
            }
        
            async function sendLastPayment() {
                const button = document.getElementById('sendButton');
                const result = document.getElementById('result');
                
                button.disabled = true;
                button.textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
                result.innerHTML = '';
                
                try {
                    const response = await fetch('/api/send-last-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        result.className = 'result success';
                        result.innerHTML = \`‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û!
                        
üì± Telegram: \${data.telegram ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}
üí¨ Slack: \${data.slack ? '–û–¢–ü–†–ê–í–õ–ï–ù–û' : '–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}

üí≥ –ü–ª–∞—Ç–µ–∂: \${data.payment_id}
üìß Email: \${data.customer_email}

üéâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã!\`;
                    } else {
                        result.className = 'result error';
                        result.innerHTML = \`‚ùå –û–®–ò–ë–ö–ê: \${data.message}\`;
                    }
                } catch (error) {
                    result.className = 'result error';
                    result.innerHTML = \`‚ùå –û–®–ò–ë–ö–ê –°–ï–¢–ò: \${error.message}\`;
                } finally {
                    button.disabled = false;
                    button.textContent = 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É';
                }
            }
        </script>
    </body>
    </html>
  `);
});
app.use(express.json());
app.use(webhookRouter);
app.use('/api', createCheckoutRouter);
app.use('/api', sendLastPaymentRouter);
app.use('/api', syncPaymentsRouter);
app.listen(ENV.PORT, () => {
    logger.info(`Server listening on port ${ENV.PORT}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    logger.info('üîÑ Starting automatic sync every 5 minutes...');
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    setTimeout(async () => {
        try {
            logger.info('üöÄ Running initial sync...');
            const response = await fetch(`http://localhost:${ENV.PORT}/api/sync-payments`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            const result = await response.json();
            logger.info({ result }, 'Initial sync completed');
        }
        catch (error) {
            logger.error({ error }, 'Initial sync failed');
        }
    }, 30000);
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(async () => {
        try {
            logger.info('üîÑ Running scheduled sync...');
            const response = await fetch(`http://localhost:${ENV.PORT}/api/sync-payments`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            const result = await response.json();
            logger.info({ result }, 'Scheduled sync completed');
        }
        catch (error) {
            logger.error({ error }, 'Scheduled sync failed');
        }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
});
