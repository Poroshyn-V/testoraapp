import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ sync-payments.js
function formatTelegram(payment, customer = null) {
  const amount = payment.amount / 100;
  const currency = payment.currency.toUpperCase();
  const email = customer?.email || 'N/A';
  const metadata = customer?.metadata || {};
  const country = metadata.geo_country || 'US';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
  const orderId = Math.random().toString(36).substring(2, 15);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
  const gender = metadata.gender || 'N/A';
  const age = metadata.age || 'N/A';
  const creativeLink = metadata.creative_link || 'N/A';
  const platform = metadata.utm_source || 'N/A';
  const placement = metadata.utm_medium || 'N/A';
  const adName = metadata.ad_name || 'N/A';
  const adsetName = metadata.adset_name || 'N/A';
  const campaignName = metadata.utm_campaign || 'N/A';
  const productTag = metadata.product_tag || 'N/A';
  
  return `üü¢ Order ${orderId} was processed!
---------------------------
üí≥ card
üí∞ ${amount} ${currency}
üè∑Ô∏è ${productTag}
---------------------------
üìß ${email}
---------------------------
üå™Ô∏è ${orderId.substring(0, 6)}
üìç ${country}
üßç${gender} ${age}
üîó ${creativeLink}
${platform}
${placement}
${adName}
${adsetName}
${campaignName}`;
}

function formatSlack(payment, customer = null) {
  const amount = payment.amount / 100;
  const currency = payment.currency.toUpperCase();
  const email = customer?.email || 'N/A';
  const metadata = customer?.metadata || {};
  const country = metadata.geo_country || 'US';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
  const orderId = Math.random().toString(36).substring(2, 15);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
  const gender = metadata.gender || 'N/A';
  const age = metadata.age || 'N/A';
  const creativeLink = metadata.creative_link || 'N/A';
  const platform = metadata.utm_source || 'N/A';
  const placement = metadata.utm_medium || 'N/A';
  const adName = metadata.ad_name || 'N/A';
  const adsetName = metadata.adset_name || 'N/A';
  const campaignName = metadata.utm_campaign || 'N/A';
  const productTag = metadata.product_tag || 'N/A';
  
  return `:large_green_circle: Order ${orderId.substring(0, 8)}... processed!
---------------------------
:credit_card: card
:moneybag: ${amount} ${currency}
:label: ${productTag}
---------------------------
:e-mail: ${email}
---------------------------
:round_pushpin: ${country}
:standing_person: ${gender} ${age}
:link: ${creativeLink}
${platform}
${placement}
${adName}
${adsetName}
${campaignName}`;
}

async function showTestNotification() {
  try {
    console.log('üß™ –ü–û–ö–ê–ó–´–í–ê–ï–ú –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂
    const payments = await stripe.paymentIntents.list({ limit: 1 });
    
    if (payments.data.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const payment = payments.data[0];
    const customer = await stripe.customers.retrieve(payment.customer);
    const metadata = customer?.metadata || {};
    
    console.log(`üí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–ª–∞—Ç–µ–∂–æ–º: ${payment.id}`);
    console.log(`üìß Email: ${customer?.email || '–ù–ï–¢'}`);
    console.log(`üåç UTM Source: ${metadata.utm_source || '–ù–ï–¢'}`);
    console.log(`üì± Ad Name: ${metadata.ad_name || '–ù–ï–¢'}`);
    console.log(`üéØ Campaign: ${metadata.utm_campaign || '–ù–ï–¢'}`);
    console.log(`üåç Geo Country: ${metadata.geo_country || '–ù–ï–¢'}`);
    console.log(`üèôÔ∏è Geo City: ${metadata.geo_city || '–ù–ï–¢'}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const telegramMessage = formatTelegram(payment, customer);
    const slackMessage = formatSlack(payment, customer);
    
    console.log('\nüì± TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:');
    console.log('================================');
    console.log(telegramMessage);
    console.log('================================');
    
    console.log('\nüí¨ SLACK –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:');
    console.log('================================');
    console.log(slackMessage);
    console.log('================================');
    
    console.log('\nüéØ –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:');
    console.log('‚úÖ Email –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è: runcollin@yahoo.com');
    console.log('‚úÖ UTM Source: meta');
    console.log('‚úÖ UTM Medium: Facebook_Profile_Feed');
    console.log('‚úÖ UTM Campaign: Testora_WEB_US_Core-0001-Manual_cpi_fcb_29.09.2025');
    console.log('‚úÖ Ad Name: 6025_static_var01_Spectrum_Impulse_12IQTypes_VP_En');
    console.log('‚úÖ Adset Name: WEB_EN_US_Broad_testora-myiq_HV_26.09.2025_Testora_Manual');
    console.log('‚úÖ Country: US');
    console.log('‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    
    console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
    console.log('üì± –ü—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram');
    console.log('üí¨ –ò —Ç–∞–∫–æ–µ –∂–µ –≤ Slack');
    console.log('üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

showTestNotification();
